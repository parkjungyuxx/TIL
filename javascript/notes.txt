
Map Set

해시 테이블 구조를 기반으로 하는 자료구조
해시값(암호화 된 값)으로 키, 값을 바꾸어 저장 데이터 추가와 검색에 용이하게 살계
일일히 같이 똑같은지 비교하지 않고, 해쉬 값을 비교하기 때문에 검색 시간이 엄청 빠르다.

자료구조가 복잡하거나, 많은 데이터의 양을 다룰때 용이하게

------------------

프로토타입 클래스

자바스크립트는 프로토타입 기반 언어
객체가 객체를 상속한다.

Object()는 객체
Object.keys()
Object.values()

모든 객체는 Prototype

Class

ES6에 추가된 문법, 객체지향프로그래밍을 보다 명확하게 사용하기 위해 등장한 개념

자바스크립트는 함수 지향이기는 하지만, 함수지향이다 객체지향 => 하이브리드
타입스크립트 기반, 객체지향 기반으로 백엔드를 작성하는 것이 -> newstJS

자바스크립트의 class는 눈속임, 프로토타입이 너무 사용하기 어려우니까, 
객체지향에 익숙한 사람들에게 사용하기 편하게하기 위해서 프로토타입을 변형

------------------

this
>> 누가 불렀느냐에 따라 동적으로 결정되는 값
>> 누가 나를 불렀는가
>> 객체에서 불렀는지, 함수에서 불렀는지 등에 따라서 값이 유동적으로 변경

--------------------

실행 컨텍스트 (실행 환경 -> 어떻게 실행되는가)

1. Global Execution Context
2. Function Execution Context
3. Eval, Module

평가, 실행

### 평가 
전역 실행 컨텍스트를 생성하고, 변수 함수 등의 선언 문을 파악하여 스코프를 정의
사용 가능한 식별자들을 컨텍스트에 등록하는 과정

** 호이스팅
평가하는 과정에서 식별자들이 등록되기 때문에, 할당하기 이전에 값이 사용되는 것

let, const 를 사용해서 해결했음 -> declaratvie environment record (할당 되어야만 사용 가능한 저장소)
평가를 합니다, ---> 만약에 할당되지 않았다면 사용 시 에러가 발생하게 핸들링

### 실행
가장 먼저 생성되는 컨텍스트

1. 전역 실행 객체 (빌트인 함수, 객체)
2. 전역 컨텍스트 (전역 변수, 전역 함수)
    Lexical Environment 
        declaratvie environment record (let, const)
        object environment record (나머지)

3. 함수 실행 컨텍스트 
    특정 함수가 실행될 때 컨텍스트를 생성, 평가 실행 단계를 똑같이 진행

